#!/usr/bin/python
import subprocess
import re

def create_spc (parameters, currval):
  f = open('dcicpp.spc','w')
  f.write("maxit 200\n")
  f.write("maxrest 200000\n")
  f.write("MaxTime 60\n");
  f.write("PartialPenal 1\n");
  f.write("UsePorcelli 1\n");
  f.write("UseMUMPS 0\n");
  f.write("project_dcp 0\n");
  f.write("project_bfgs 1\n");
  f.write("trustWorstdn 0\n");
  f.write("trustConvexBox 0\n");
  f.write("penal_trust 0\n");
  f.write("penal_bfgs 0\n");
  f.write("MaxDiag 1e3\n");
  f.write("MinDiag 0\n");
  f.write("UseVertInteriorPoint 1\n");
  f.write("ScaleVertical 0\n");
  f.write("UseVertSafeguard 0\n");
  for i in range(len(parameters)):
    f.write(' '.join(str(x) for x in [parameters[i],currval[i],'\n'] ))
  f.close()

def calc_obj_fun (currval):
  create_spc(parameters, currval)
  subprocess.call("rm -f latex_*", shell=True)
  p = subprocess.Popen("./runlist.sh HS.list",
                       stdout=subprocess.PIPE,
                       stderr=subprocess.PIPE, shell=True)
  out, err = p.communicate()
  q = subprocess.Popen(['wc','-l','latex_convergence'], stdout=subprocess.PIPE,
              stderr=subprocess.PIPE)
  out, err = q.communicate()

  if (out is ''):
    out = 0
  else:
    out = out.split()[0]
  return int(out)

parameters = ['eta1','eta2','eta3','thetaR','rhomin','phi1','phi2',
    'alphaR','alphaI','alphaS']
minval =     [0,0,0,0,0,0,0,0,1.5,0]
maxval =     [1,1,1,1,1,1,1,1,3.0,1]
currval =    [1e-12,0.2,0.6,0.9,1e-8,1,0.45,0.75,2.5,6.25e-2]

objfun = calc_obj_fun(currval)
alpha = 2**(-12)
minalpha = 2**(-30)

print ''.join(str(x) for x in ["alpha = ",alpha])
print currval
print ''.join(str(x) for x in ["f = ",objfun])
while (alpha > minalpha):
  improved = False
  for i in range(len(currval)):
    print ''.join(str(x) for x in ["try +e_",i])
    currval[i] = currval[i] + alpha
    if (currval[i] > maxval[i]):
      currval[i] = currval[i] - alpha
      continue
    newobjfun = calc_obj_fun(currval)
    print ''.join(str(x) for x in ["f+ = ",newobjfun])
    if (newobjfun > objfun):
      improved = True
      objfun = newobjfun
      break
    else:
      currval[i] = currval[i] - alpha;
  for i in range(len(currval)):
    if (improved is True):
      break
    print ''.join(str(x) for x in ["try -e_",i])
    currval[i] = currval[i] - alpha
    if (currval[i] < minval[i]):
      currval[i] = currval[i] + alpha
      continue
    newobjfun = calc_obj_fun(currval)
    print ''.join(str(x) for x in ["f+ = ",newobjfun])
    if (newobjfun > objfun):
      improved = True
      objfun = newobjfun
      break
    else:
      currval[i] = currval[i] + alpha;
  if (not improved):
    alpha = alpha/2.0

  print ''.join(str(x) for x in ["alpha = ",alpha])
  print currval
  print ''.join(str(x) for x in ["f = ",objfun])
